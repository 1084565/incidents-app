#!/usr/bin/env node
/* eslint-disable no-console */

const [,,$1] = process.argv
const { exec } = require('child_process');
const { readFile, writeFile } = require("fs").promises;
const { join } = require("path");
const levelUP = "../../"

async function remoteService () {
    const TARGET_DIR = "xmpls/remote-service"

    const packageJson = JSON.parse(await readFile(join(__dirname, levelUP ,"package.json"), "utf-8"));
    const delta = JSON.parse(await readFile(join(__dirname, levelUP, TARGET_DIR, "package.json"), "utf-8"));
    packageJson.cds.requires["API_BUSINESS_PARTNER"] = delta.cds.requires["API_BUSINESS_PARTNER"]
    await writeFile(join(__dirname, levelUP, "package.json"), JSON.stringify(packageJson, null, 2), "utf-8");

    // Remove mashup.cds > needed only for test context
    await run(`shx rm -rf ${join(__dirname, levelUP, TARGET_DIR, "srv/mashup.cds")}`);

}

async function messaging () {
    const TARGET_DIR = "xmpls/messaging"

    const packageJson = JSON.parse(await readFile(join(__dirname, levelUP, "package.json"), "utf-8"));
    const delta = JSON.parse(await readFile(join(__dirname, levelUP, TARGET_DIR, "package.json"), "utf-8"));
    packageJson.cds.requires["API_BUSINESS_PARTNER"] = delta.cds.requires["API_BUSINESS_PARTNER"]
    packageJson.cds.requires["messaging"] = delta.cds.requires["messaging"]
    await writeFile(join(__dirname, levelUP, "package.json"), JSON.stringify(packageJson, null, 2), "utf-8");

    // Add UI fields for email in annotation
    const content = "using from './incidents/field';"
    await run(`shx echo '${content}' > ${join(__dirname, levelUP, TARGET_DIR, "app/fields.cds")}`);

    // Remove mashup.cds > needed only for test context
    await run(`shx rm -rf ${join(__dirname, levelUP, TARGET_DIR, "srv/mashup.cds")}`);

}

async function setup (TARGET_DIR = 'xmpls', INCLUDES = []) {
    const paths = INCLUDES.map(pattern => join(__dirname, levelUP, TARGET_DIR, pattern))
    const cmd = `shx cp -r ${paths.join(' ')} ${join(__dirname, levelUP, "srv")}`
    await run(cmd);
}

async function reset (TARGET_DIR = 'srv', INCLUDES = []) {

    const paths = INCLUDES.map(pattern => join(__dirname, levelUP, TARGET_DIR, pattern))
    const cmd = `shx rm -rf ${paths.join(' ')}`
    await run(cmd);
}

function run (cmd, silent) {
    if (cmd.raw) return run (String.raw(...arguments))
    if (cmd.endsWith('--silent')) silent = cmd = cmd.slice(0,-9)
    if (typeof cmd === 'string') cmd = new Promise ((done,failed) => {
        const cp = exec (cmd, (e,stdout) => e ? failed(e) : done(stdout))
        if (!silent) {
        cp.stdout.on ('data', d => process.stdout.write(d))
        cp.stderr.on ('data', d => process.stderr.write(d))
        }
    })
    return cmd
}

switch ($1) {
 
    case 'remote-service':
        remoteService();
        break;
    case 'messaging':
        messaging();
        break;
    default:
        console.log('Usage: ./checkout <command>');
}

module.exports = { setup, reset }